* MCATutor
  Lauren Becker, Daniel Brett, Isaiah Rawlinson
* Abstract
  Our project attempts to improve the study experience and preparation
  for the MCAT exam. The majority of students use one or two
  traditional courses of study, either they use online materials and a
  prep book, or they hire a tutor who guides them through the required
  fields for the exam. Our project, MCATutor, will attempt to improve
  this experience by providing students with a chatbot (using Python’s
  ChatterBot module) that allows for an interactive study session.

  Ideally, the bot should send students questions from a specific
  subsection of the exam. These questions will be scraped from
  practice exams that are available online, likely by hard-coding
  these questions into the bot itself. As the students get the
  questions right, the bot will provide questions that are harder and
  harder (or vice versa). If a student gets a series of questions
  wrong, the bot should also recommend links to relevant study
  materials that the student can review. This will accomplished by
  using NLTK’s built in sentence complexity mechanism, which ranks the
  complexity of the sentence based off length, structure and other
  variables (link below). The bot should also be able to answer very
  basic clarifying questions about the problems (e.g. word and symbol
  definitions).
* System Requirements and Usage
  MCATutor depends on several libraries and protocols available only
  in python 3.x

  To start the chatbot run the python file from a command prompt.
  #+BEGIN_SRC sh
python3 chatbot.py
  #+END_SRC
  Press =ctrl-d= or =ctrl-c= to quit out of the bot.
* Goals and Features
** Term Project
*** Collect and Process Questions
    - Use card decks from Quizlet
      + Crowd-sourced collection of questions
      + Taking advantage of the API for easily extensible scraping
    - Scraper
      + Pair questions with answers
    - Put results into database for chat bot
*** Chatbot
    - Ask test question, receive answer from user
      + Pull question and answers
    - Ask user what style of question they want to practice
      + Multiple choice, short answer, etc.
    - Ask user what topic they want to practice
      + Biology, chemistry, physics, behavioral sciences
*** AI
    - Constraint satisfaction
      + Develop equal proficiency in all topics and question styles
        - Suggest topics the user should study more
        - Give the user more questions that they will find difficult
          to give them better practice with the topics and question
          styles
      + What topics does the user have trouble with?
      + Does the user do well with multiple choice but struggle with
        short answer questions?
    - Machine learning
      + Train the bot to recognize correct answers on it's own through
        guided learning
** Stretch and Post-Semester Goals
   - Collect relevant materials
     + Google results for user to learn more about the topic
     + Specific results
     + Use natural language tools to find key words and phrases in the
       question
   - Train the scraper to identify the topic of a given question to
     quickly sort data and increase the number of usable questions
   - Build a website for the application with a more
     friendly/intuitive UI
     + Domain: http://mcatutor.com/
